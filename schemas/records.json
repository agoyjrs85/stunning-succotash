{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://platform.codeclimate.com/schemas/records",
  "title": "Code Climate Platform Schema",
  "description": "Schema for Code Climate Connector records",
  "$ref": "#/$definitions/record",
  "$definitions": {
    "record": {
      "oneOf": [
        { "$ref": "#/$definitions/stream" },
        { "$ref": "#/$definitions/actor" },
        { "$ref": "#/$definitions/group" },
        { "$ref": "#/$definitions/application" },
        { "$ref": "#/$definitions/board" },
        { "$ref": "#/$definitions/branch" },
        { "$ref": "#/$definitions/build" },
        { "$ref": "#/$definitions/calendar" },
        { "$ref": "#/$definitions/calendarEvent" },
        { "$ref": "#/$definitions/commit" },
        { "$ref": "#/$definitions/component" },
        { "$ref": "#/$definitions/dependencyIssue" },
        { "$ref": "#/$definitions/deployment" },
        { "$ref": "#/$definitions/environment" },
        { "$ref": "#/$definitions/featureFlag" },
        { "$ref": "#/$definitions/repository" },
        { "$ref": "#/$definitions/incident" },
        { "$ref": "#/$definitions/incidentNotification" },
        { "$ref": "#/$definitions/deliveryWorkflow" },
        { "$ref": "#/$definitions/deliveryBuild" },
        { "$ref": "#/$definitions/deliveryJob" },
        { "$ref": "#/$definitions/testResultTotals" },
        { "$ref": "#/$definitions/testResult" },
        { "$ref": "#/$definitions/coverageTotals" },
        { "$ref": "#/$definitions/fileCoverage" }
      ],
      "required": ["type"]
    },
    "stream": {
      "$id": "https://platform.codeclimate.com/schemas/records/stream",
      "type": "object",
      "description": "Streams are data sources that can be subscribed to.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Stream"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "An ID for this stream. Should be unique within the context of this connector for a given configuration."
            },
            "self": {
              "description": "The canonical URL for this stream",
              "type": "string",
              "format": "uri"
            },
            "name": {
              "type": "string",
              "description": "A name for this stream"
            },
            "htmlUrl": {
              "description": "The URL for a human to view this stream",
              "type": "string",
              "format": "uri"
            },
            "description": {
              "description": "A description of this stream",
              "type": "string"
            },
            "record": {
              "description": "A stream may be a representation of another record - use the URI of that record here if desired.",
              "type": "string",
              "format": "uri"
            },
            "recordType": {
              "description": "The `type` of the record referred to by the `record` URI, if present",
              "type": "string"
            },
            "subscribed": {
              "type": "boolean",
              "description": "Represents if the stream has been subscribed to by a user within Code Climate"
            }
          },
          "required": ["id", "self", "name"]
        },
        "required":  ["type", "attributes"]
      }
    },
    "actor": {
      "type": "object",
      "description": "Actors are human or non-humans that perform actions.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Actor"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this actor",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record",
              "type": "string",
              "format": "uri"
            },
            "name": {
              "description": "The name of the actor",
              "type": "string"
            },
            "email": {
              "description": "The name of the email",
              "type": "string"
            },
            "bot": {
              "type": "boolean",
              "description": "indicates the actor is not a human"
            },
            "htmlUrl": {
              "type": "string",
              "description": "A web URL for this actor",
              "format": "uri"
            },
            "avatarUrl": {
              "type": "string",
              "description": "a URL for an avatar for this actor",
              "format": "uri"
            },
            "createdAt": {
              "description": "The time actor repository was created",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this actor was updated",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time this actor was deleted",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "id", "self" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "group": {
      "type": "object",
      "description": "A group of actors.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Group"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this group",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record",
              "type": "string",
              "format": "uri"
            },
            "name": {
              "description": "The name of the group",
              "type": "string"
            },
            "description": {
              "description": "The description of the group",
              "type": "string"
            },
            "members": {
              "type": "array",
              "description": "URLs of actors",
              "items": { "type": "string", "format": "ui" }
            },
            "htmlUrl": {
              "type": "string",
              "description": "A web URL for this group",
              "format": "uri"
            },
            "createdAt": {
              "description": "The time the actor group was created",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this group was updated",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time this group was deleted",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "id", "self" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "application": {
      "type": "object",
      "description": "A software program or group of programs delivered to an end user, defined by a set of Components.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Application"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this application",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record",
              "type": "string",
              "format": "uri"
            },
            "name": {
              "description": "The name of the application",
              "type": "string"
            },
            "description": {
              "description": "The description of the application",
              "type": "string"
            },
            "createdAt": {
              "description": "The time the application was created",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this application was updated",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time this application was deleted",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "id", "self" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "board": {
      "type": "object",
      "description": "Boards depict issues moving across Statuses.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Board"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this board",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record",
              "type": "string",
              "format": "uri"
            },
            "name": {
              "description": "The name of the application",
              "type": "string"
            },
            "boardType": {
              "description": "The type of board",
              "type": "string",
              "enum": ["kanban", "scrum", "simple"]
            },
            "createdAt": {
              "description": "The time this the board was created",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this board was updated",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time this board was deleted",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "id", "self" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "branch": {
      "type": "object",
      "description": "Named reference within Repository.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Branch"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "self": {
              "description": "The canonical URI for this record",
              "type": "string",
              "format": "uri"
            },
            "name": {
              "description": "The name of the branch",
              "type": "string"
            },
            "repository": {
              "description": "The `self` URI of the Repository this branch applies to, or a nested Repository record.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/repository" }
              ]
            },
            "deletedAt": {
              "description": "The time this branch was deleted",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "self" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "build": {
      "type": "object",
      "description": "TODO: Build needs a description.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Build"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this build",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record",
              "type": "string",
              "format": "uri"
            },
            "repository": {
              "description": "The `self` URI of the Repository this build applies to, or a nested Repository record.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/repository" }
              ]
            },
            "commitOid": {
              "description": "The oid of the Commit this Build ran on.",
              "type": "string"
            },
            "number": {
              "description": "The number identifying this build",
              "type": "integer"
            },
            "retry": {
              "description": "Whether the build is a retry of another",
              "type": "boolean"
            },
            "pullRequestUrl": {
              "description": "The url of the pull request this build is associated with",
              "type": "string",
              "format": "uri"
            },
            "branchName": {
              "description": "The name of the branch the build is associated with",
              "type": "string"
            },
            "lifecycle": {
              "description": "The various lifecycle states of the build",
              "type": "string",
              "enum": ["queued", "scheduled", "running", "finished"]
            },
            "outcome": {
              "description": "The outcome of the build",
              "type": "string",
              "enum": ["canceled", "erorred", "timedout", "failed", "success"]
            },
            "startedAt": {
              "description": "The time this build started",
              "type": "string",
              "format": "date-time"
            },
            "finishedAt": {
              "description": "The time this build finished",
              "type": "string",
              "format": "date-time"
            },
            "duration": {
              "description": "The amount of time the build took ",
              "type": "integer"
            }
          },
          "required": [ "id", "self", "repository", "commitOid", "lifecycle" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "calendar": {
      "type": "object",
      "description": "Calendars are groups of CalendarEvents.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Calendar"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this calendar",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record",
              "type": "string",
              "format": "uri"
            },
            "title": {
              "description": "The title of this calendar",
              "type": "string"
            },
            "description": {
              "description": "The description of this calendar",
              "type": "integer"
            },
            "timeZone": {
              "description": "The timezone of this calendar",
              "type": "timezone"
            }
          },
          "required": [ "id", "self" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "calendarEvent": {
      "type": "object",
      "description": "TODO: better name...CalendarEvents are events in a calendar",
      "properties": {
        "type": {
          "type": "string",
          "const": "CalendarEvent"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this calendar event",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record",
              "type": "string",
              "format": "uri"
            },
            "summary": {
              "description": "A summary of the calendar event",
              "type": "string"
            },
            "status": {
              "description": "The status of the calendar event",
              "type": "string",
              "enum": ["confirmed", "tentative", "cancelled"]
            },
            "description": {
              "description": "The description of this calendar",
              "type": "integer"
            },
            "location": {
              "description": "The location of the event",
              "type": "string"
            },
            "visibility": {
              "description": "The timezone of this calendar",
              "type": "string",
              "enum": ["default", "public", "private"]
            },
            "start.date": {
              "description": "For all day events",
              "type": "date-time"
            },
            "start.dateTime": {
              "description": "For non-all day events",
              "type": "date-time"
            },
            "start.timeZone": {
              "description": "Timezone for start",
              "type": "timezone"
            },
            "end.date": {
              "description": "For all day events",
              "type": "date-time"
            },
            "end.dateTime": {
              "description": "For non-all day events",
              "type": "date-time"
            },
            "end.timeZone": {
              "description": "Timezone for end",
              "type": "timezone"
            },
            "recurringEvent": {
              "description": "If event is recurring, URL to the recurring event",
              "type": "string",
              "format": "uri"
            },
            "attendees": {
              "description": "Attendees",
              "type": "array",
              "items": { "type": "string" }
            },
            "attendeesOmitted": {
              "description": "If attendee information was ommitted due to too many attendees",
              "type": "boolean"
            }
          },
          "required": [ "id", "self", "start.timeZone", "end.timeZone" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "commit": {
      "type": "object",
      "description": "A commit.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Commit"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this commit.",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "author": {
              "description": "The `self` URI of the related Actor, or a nested Actor record, if it exists.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/actor" }
              ]
            },
            "committer": {
              "description": "The `self` URI of the related Actor, or a nested Actor record, if it exists.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/actor" }
              ]
            },
            "message": {
              "description": "The commit message.",
              "type": "string"
            },
            "tree": {
              "description": "The commit tree.",
              "type": "string"
            },
            "parents": {
              "description": "The canonical URI for this record.",
              "type": "array",
              "items": { "type": "string" }
            },
            "statistics": {
              "description": "Commit statistics.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the statistics.",
                  "type": "string"
                },
                "type": {
                  "description": "What type of statistic this is.",
                  "type": "string"
                },
                "additions": {
                  "description": "Lines of code added in this commit.",
                  "type": "integer"
                },
                "deletions": {
                  "description": "Lines of code deleted in this commit.",
                  "type": "integer"
                },
                "total": {
                  "description": "Total lines of code in this commit.",
                  "type": "integer"
                }
              },
              "required": [ "id", "type" ]
            }
          },
          "required": [ "id", "self" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "commitCheck": {
      "type": "object",
      "description": "A status rendered on a Commit, e.g. from a CI/CD or code quality tool.",
      "properties": {
        "type": {
          "type": "string",
          "const": "CommitCheck"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this CommitCheck.",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "avatarUrl": {
              "description": "An avatar for this owner.",
              "type": "string",
              "format": "uri"
            },
            "commitOid": {
              "description": "The oid of the Commit associated with this CommitCheck, if present.",
              "type": "string"
            },
            "context": {
              "description": "The context of the CommitCheck",
              "type": "string"
            },
            "state": {
              "description": "The state of the CommitCheck",
              "type": "string"
            },
            "description": {
              "description": "The description of this commit check",
              "type": "integer"
            },
            "createdAt": {
              "description": "The time the commit check was created",
              "type": "string",
              "format": "date-time"
            },
            "creator": {
              "description": "The `self` URI of the related Actor, or a nested Actor record, if it exists.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/actor" }
              ]
            },
            "targetUrl": {
              "description": "Target url.",
              "type": "string",
              "format": "uri"
            }
          },
          "required": [ "id", "self", "commitOid", "context", "state" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "component": {
      "type": "object",
      "description": "Components are conceptual units of software, defined as a set of source files, which are composed into Applications. A Component might correspond directly with a Repository, consist of a subset of files within a monorepo, or be comprised of the union set of files spread across multiple repositories.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Component"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this Component.",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "name": {
              "description": "The component's name.",
              "type": "string"
            },
            "description": {
              "description": "The component's description.",
              "type": "string"
            },
            "files": {
              "description": "Files associated with a component",
              "type": "array",
              "items": { 
                "type": "object", 
                "properties": {
                  "repository": {
                    "description": "The `self` URI of the Repository this file applies to, or a nested Repository record.",
                    "oneOf": [
                      { "type": "string", "format": "uri" },
                      { "$ref": "#/$definitions/repository" }
                    ]
                  },
                  "pattern": {
                    "description": "The file's pattern.",
                    "type": "string"
                  }
                }
              }
            },
            "createdAt": {
              "description": "The time this component was created",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this component was updated",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time this component was deleted",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "id", "self" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "dependencyIssue": {
      "type": "object",
      "description": "An issue with a dependency, such as a security vulnerability or a licensing issue.",
      "properties": {
        "type": {
          "type": "string",
          "const": "DependencyIssue"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this Dependency Issue.",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "title": {
              "description": "The title of this Dependency Issue.",
              "type": "string"
            },
            "message": {
              "description": "The Dependency Issue message.",
              "type": "string"
            },
            "fingerprint": {
              "description": "TODO: Fingerprint",
              "type": "string"
            },
            "status": {
              "description": "The status of the Dependency Issue",
              "type": "string"
            },
            "statusDetails": {
              "description": "The details of the Dependency Issue's status",
              "type": "string"
            },
            "statusUpdatedAt": {
              "description": "The time the status was updated at",
              "type": "string",
              "format": "date-time"
            },
            "statusUpdatedBy": {
              "description": "TODO: StatusUpdatedBy",
              "type": "string"
            },
            "rawDetails": {
              "description": "TODO",
              "type": "string"
            },
            "htmlUrl": {
              "description": "A URL for this Dependency Issue.",
              "type": "string",
              "format": "uri"
            },
            "createdAt": {
              "description": "The time this component was created",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this component was updated",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time this component was deleted",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "id", "self" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "deployment": {
      "type": "object",
      "description": "Deployments push changes to a runtime Evironment.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Deployment"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this Deployment.",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "environment": {
              "description": "The `self` URI of the related Environment, or a nested Environment record, if it exists.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/environment" }
              ]
            },
            "originalEnvironment": {
              "description": "The `self` URI of the related staging Environment if promoting to production, or a nested Environment record, if it exists.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/environment" }
              ]
            },
            "commitOid": {
              "description": "The oid of the Commit this Build ran on, if present.",
              "type": "string"
            },
            "branch": {
              "description": "The name of the branch this Deployment is associated with, if present.",
              "type": "string"
            },
            "version": {
              "description": "TODO: string or int? The deployment version",
              "type": "string"
            },
            "packages": {
              "description": "TODO: Packages",
              "type": "array",
              "items": { "type": "string" }
            },
            "creator": {
              "description": "The `self` URI of the related Actor, or a nested Actor record, if it exists.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/actor" }
              ]
            },
            "htmlUrl": {
              "description": "The URL to view this deployment.",
              "type": "string",
              "format": "uri"
            },
            "statusUrl": {
              "description": "The URL to view the status of this deployment.",
              "type": "string",
              "format": "uri"
            },
            "createdAt": {
              "description": "The time this build was created.",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "id", "self" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "environment": {
      "type": "object",
      "description": "Represents a running instance of an Application, like production or staging.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Environment"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this Environment.",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "name": {
              "description": "The name of the environment.",
              "type": "string"
            },
            "description": {
              "description": "The description of the environment.",
              "type": "string"
            },
            "transient": {
              "description": "Whether the environment is transient.",
              "type": "boolean"
            },
            "production": {
              "description": "Whether the environment is production.",
              "type": "boolean"
            },
            "htmlUrl": {
              "description": "The URL to view this environment.",
              "type": "string",
              "format": "uri"
            },
            "createdAt": {
              "description": "The time this environment was created",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this environment was updated",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time this environment was deleted",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "id", "self" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "featureFlag": {
      "type": "object",
      "description": "FeatureFlags allow changes to be gradually rolled out to an Environment after a Deployment.",
      "properties": {
        "type": {
          "type": "string",
          "const": "FeatureFlag"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this Environment.",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "name": {
              "description": "The name of the FeatureFlag.",
              "type": "string"
            },
            "kind": {
              "description": "The kind of FeatureFlag.",
              "type": "string"
            },
            "key": {
              "description": "The FeatureFlag key.",
              "type": "string"
            },
            "temporary": {
              "description": "Whether the FeatureFlag is temporary.",
              "type": "boolean"
            },
            "maintainer": {
              "description": "The `self` URI of the related Actor, or a nested Actor record, if it exists.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/actor" }
              ]
            },
            "htmlUrl": {
              "description": "The URL to view this environment.",
              "type": "string",
              "format": "uri"
            },
            "createdAt": {
              "description": "The time this FeatureFlag was created",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this FeatureFlag was updated",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time this FeatureFlag was deleted",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "id", "self" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "repository": {
      "type": "object",
      "description": "A code repository.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Repository"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this repository.",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "owner": {
              "description": "The owning entity of the repository - usually an organization or a user.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the owner.",
                  "type": "string"
                },
                "type": {
                  "description": "What type of owner this is.",
                  "type": "string",
                  "enum": ["user", "organization"]
                },
                "name": {
                  "description": "The owner's canonical name, e.g. a username.",
                  "type": "string"
                },
                "htmlUrl": {
                  "description": "A web URL for this owner.",
                  "type": "string",
                  "format": "uri"
                },
                "avatarUrl": {
                  "description": "An avatar for this owner.",
                  "type": "string",
                  "format": "uri"
                }
              },
              "required": [ "id", "type", "name" ]
            },
            "name": {
              "description": "The name of the repository",
              "type": "string"
            },
            "htmlUrl": {
              "description": "The URL of this repository on the web",
              "type": "string",
              "format": "uri"
            },
            "defaultBranch": {
              "description": "The default branch of this repository",
              "type": "string",
              "default": "master"
            },
            "languages": {
              "description": "Languages used in this array",
              "type": "array",
              "items": { "type": "string" }
            },
            "fork": {
              "description": "A flag to mark this repository as a fork",
              "type": "boolean"
            },
            "private": {
              "description": "A flag to mark this repository as private (if false, that indicates the repository is public)",
              "type": "boolean"
            },
            "createdAt": {
              "description": "The time this repository was created",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this repository was updated",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time this repository was deleted",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "id", "self", "owner", "name" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "incident": {
      "type": "object",
      "description": "Incidents are a normalized, de-duplicated event. It can be thought of as a problem or an issue within your service that needs to be addressed and resolved.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Incident"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this incident from the incident response platform",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record",
              "type": "string",
              "format": "uri"
            },
            "title": {
              "description": "The human-readable title of this incident",
              "type": "string"
            },
            "htmlUrl": {
              "description": "The URL for a human to view this incident",
              "type": "string",
              "format": "uri"
            },
            "number": {
              "description": "The number identifying this incident",
              "type": "integer"
            },
            "status": {
              "description": "The status of this incident",
              "enum": ["triggered", "acknowledged", "resolved"]
            },
            "createdAt": {
              "description": "The time this incident began.",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this incident was last updated.",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time this incident was deleted.",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "id", "self", "title", "htmlUrl", "number", "status", "createdAt"
          ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "incidentNotification": {
      "type": "object",
      "description": "IncidentNotifications are a 'page' that results from an incident being triggered or escalated.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Incident"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this incidentNotification from the incident response platform",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record",
              "type": "string",
              "format": "uri"
            },
            "incident": {
              "description": "The `self` URI of the related Incident, or a nested Incident record, if it exists.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/incident" }
              ]
            },
            "recipient": {
              "description": "The recepient of the incident notification",
              "type": "string"
            },
            "kind": {
              "description": "The kind of incident notification.",
              "type": "string",
              "enum": ["phone", "email", "text", "push"]
            },
            "createdAt": {
              "description": "The time this incident notification began.",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this incident notification was last updated.",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time this incident notification was deleted.",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "id", "self", "incident", "kind", "createdAt"
          ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "deliveryWorkflow": {
      "type": "object",
      "description": "A configuration for running a Build within a CI system.",
      "properties": {
        "type": {
          "type": "string",
          "const": "DeliveryWorkflow"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this Workflow.",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "name": {
              "description": "The name of this Workflow.",
              "type": "string"
            },
            "htmlUrl": {
              "description": "The URL to view this Workflow.",
              "type": "string",
              "format": "uri"
            },
            "createdAt": {
              "description": "The time this Workflow was created.",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this Workflow was last updated.",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time Workflow was deleted.",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "id", "self", "name" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "deliveryBuild": {
      "type": "object",
      "description": "A Build run within a CI system.",
      "properties": {
        "type": {
          "type": "string",
          "const": "DeliveryBuild"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this Build.",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "number": {
              "description": "The number identifying this Build, if available",
              "type": "integer"
            },
            "workflow": {
              "description": "The `self` URI of the related Workflow, or a nested Workflow record, if it exists.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/deliveryWorkflow" }
              ]
            },
            "repository": {
              "description": "The `self` URI of the Repository this Build ran for, or a nested Repository record.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/repository" }
              ]
            },
            "state": {
              "description": "The state of the Build.",
              "type": "string",
              "enum": ["created", "running", "errored", "complete"]
            },
            "commitOid": {
              "description": "The oid of the Commit this Build ran on, if present.",
              "type": "string"
            },
            "branch": {
              "description": "The name of the branch this Build ran on, if present.",
              "type": "string"
            },
            "htmlUrl": {
              "description": "The URL to view this Build.",
              "type": "string",
              "format": "uri"
            },
            "createdAt": {
              "description": "The time this build was created.",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this build was last updated.",
              "type": "string",
              "format": "date-time"
            },
            "finishedAt": {
              "description": "The time this build finished.",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time build was deleted.",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "id", "self", "repository", "state", "commitOid" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "deliveryJob": {
      "type": "object",
      "description": "A Job that ran as part of a Build.",
      "properties": {
        "type": {
          "type": "string",
          "const": "DeliveryJob"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this Job.",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "build": {
              "description": "The `self` URI of the related Build.",
              "type": "string",
              "format": "uri"
            },
            "description": {
              "description": "The description of this Job.",
              "type": "string"
            },
            "state": {
              "description": "The state of the Build.",
              "type": "string",
              "enum": ["created", "running", "errored", "complete"]
            },
            "htmlUrl": {
              "description": "The URL to view this Build.",
              "type": "string",
              "format": "uri"
            },
            "createdAt": {
              "description": "The time this build was created.",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this build was last updated.",
              "type": "string",
              "format": "date-time"
            },
            "finishedAt": {
              "description": "The time this build finished.",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time build was deleted.",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": ["id", "self", "build"]
        },
        "required":  ["type", "attributes"]
      }
    },
    "testResultTotals": {
      "type": "object",
      "description": "The result of a test from a Build",
      "properties": {
        "type": {
          "type": "string",
          "const": "TestResultTotals"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this test result record.",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "build": {
              "description": "The `self` URI of the related Build, or a nested Build record.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/deliveryBuild" }
              ]
            },
            "job": {
              "description": "The `self` URI of the related Job, or a nested Job record.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/deliveryJob" }
              ]
            },
            "totalTests": {
              "description": "The total number of tests run",
              "type": "integer"
            },
            "testsFailed": {
              "description": "The number of tests run which failed",
              "type": "integer"
            }
          },
          "required": ["id", "self", "build"]
        },
        "required": ["type", "attributes"]
      }
    },
    "testResult": {
      "type": "object",
      "description": "The result of a test from a Build",
      "properties": {
        "type": {
          "type": "string",
          "const": "TestResult"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique ID of this test result record.",
              "type": "string"
            },
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "build": {
              "description": "The `self` URI of the related Build, or a nested Build record.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/deliveryBuild" }
              ]
            },
            "job": {
              "description": "The `self` URI of the related Job, or a nested Job record.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/deliveryJob" }
              ]
            },
            "state": {
              "description": "The state of the test result",
              "type": "string",
              "enum": ["passed", "failed"]
            },
            "file": {
              "description": "The file in which this test is defined.",
              "type": "string"
            },
            "message": {
              "description": "The associated message for this result.",
              "type": "string"
            },
            "name": {
              "description": "The name of the test.",
              "type": "string"
            },
            "createdAt": {
              "description": "The time this build was created.",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this build was last updated.",
              "type": "string",
              "format": "date-time"
            },
            "finishedAt": {
              "description": "The time this build finished.",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time build was deleted.",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [ "id", "self", "build" ]
        },
        "required":  ["type", "attributes"]
      }
    },
    "coverageTotals": {
      "type": "object",
      "description": "Information about test coverage of a commit.",
      "properties": {
        "type": {
          "type": "string",
          "const": "CoverageTotals"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "repository": {
              "description": "The `self` URI of the Repository this test coverage applies to, or a nested Repository record.",
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/$definitions/repository" }
              ]
            },
            "commitOid": {
              "description": "The commit oid this test coverage is for.",
              "type": "string"
            },
            "coverage": {
              "description": "The coverage of this test coverage result, as a percentage",
              "type": "number",
              "minimum": 0,
              "maximum": 100
            },
            "filesCount": {
              "description": "The number of files.",
              "type": "integer",
              "minimum": 0
            },
            "linesCount": {
              "description": "The total number of lines under test.",
              "type": "integer",
              "minimum": 0
            },
            "linesHitCount": {
              "description": "The number of lines hit by the tests.",
              "type": "integer",
              "minimum": 0
            },
            "linesMissedCount": {
              "description": "The number of lines missed by the tests.",
              "type": "integer",
              "minimum": 0
            },
            "branchesCount": {
              "description": "The number of branches.",
              "type": "integer",
              "minimum": 0
            },
            "methodsCount": {
              "description": "The number of methods tested.",
              "type": "integer",
              "minimum": 0
            },
            "htmlUrl": {
              "description": "The URL to view this coverage.",
              "type": "string",
              "format": "uri"
            },
            "createdAt": {
              "description": "The time this coverage was created.",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this coverage was last updated.",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time coverage was deleted.",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": ["self", "repository", "commitOid", "coverage"]
        },
        "required":  ["type", "attributes"]
      }
    },
    "fileCoverage": {
      "type": "object",
      "description": "Information about test coverage of a file within a commit.",
      "properties": {
        "type": {
          "type": "string",
          "const": "FileCoverage"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "self": {
              "description": "The canonical URI for this record.",
              "type": "string",
              "format": "uri"
            },
            "repository": {
              "description": "The `self` URI of the Repository this test coverage applies to, or a nested Repository record.",
              "oneOf": [
                { "$ref": "#/$definitions/repository" },
                { "type": "string", "format": "uri" }
              ]
            },
            "commitOid": {
              "description": "The commit oid this test coverage is for.",
              "type": "string"
            },
            "file": {
              "description": "The path of the file for these test results.",
              "type": "string"
            },
            "lineHits": {
              "description": "The number of hits on each line in the file, starting with line 1. An entry for every line should be present.",
              "type": "array",
              "items": {
                "oneOf": [
                  { "type": "integer" },
                  { "type": "null" }
                ]
              }
            },
            "filesCount": {
              "description": "The number of files.",
              "type": "integer",
              "minimum": 0
            },
            "htmlUrl": {
              "description": "The URL to view this coverage.",
              "type": "string",
              "format": "uri"
            },
            "createdAt": {
              "description": "The time this coverage was created.",
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "description": "The time this coverage was last updated.",
              "type": "string",
              "format": "date-time"
            },
            "deletedAt": {
              "description": "The time coverage was deleted.",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": ["self", "repository", "commitOid", "lineHits"]
        },
        "required":  ["type", "attributes"]
      }
    }
  }
}
